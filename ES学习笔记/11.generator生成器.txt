1.关键字：  function*（）{}
            yield 标注当前的状态 类似return
            调用状态机函数，返回一个迭代器iterator
            next返回一个状态
            每次执行到yield 终止运行，等待下次的next执行
            函数执行到return就结束状态，不再关注return之后的代码
2.yield 作为表达式的一部分时，调用下次next时的传值就是yield返回的值
  var n = (function* (x){
    var y = yield x+1
    yield y
  }(2))
   n.next() // 3 
   n.next() // NaN 
3.除了next可以推进状态机进度以外，还可以使用return 和 throw
  .next(x)将yield表达式替换成一个值。
  .return()将yield表达式替换成return。
  .throw()将yield表达式替换成 throw语句。
4. 在状态机中如果需要遍历其他状态机的值 使用yield *generatorfn()
5. 在调用generator函数时，可以将函数绑定在一个对象上，这样状态机内部的this就指向了该对象
    如果该对象是状态机构造函数的prototype，那么就可以直接在生成的迭代器上使用了
    function* F() {
      this.a = 1;
      yield this.b = 2;
      yield this.c = 3;
    }
    var f = F.call(F.prototype);

    f.next();  // Object {value: 2, done: false}
    f.next();  // Object {value: 3, done: false}
    f.next();  // Object {value: undefined, done: true}

    f.a // 1
    f.b // 2
    f.c // 3